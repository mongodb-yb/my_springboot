一、JMS-java消息服务 介绍
    一组Java应用程序接口，提供消息的创建、发送、读取等一系列服务。
    组成：
    Broker：消息服务器，提供消息核心服务；
    producer：消息生产者，负责生产消息传输给Broker；
    consumer：消息消费者，负责从Broker获取消息并进行业务处理。
    Topic：主题，发布订阅模式下的消息聚集中心，可实现消息广播；
    Queue：队列，ptp模式下的消息存储中心；
    Message：封装业务数据，实现消息传递。
二、JMS的两种消息发送接收模式
    1、ptp-点对点模型
       ptp模型基于队列，消息生产者发送消息到队列，消息消费者从队列中接受消息。
       队列的存在使得消息的异步传输成为可能。
       消息生产者---->队列Queue<------消息消费者(消费消息并向队列响应消费结果)
       特点：一个消息只有一个生产者消费，该消息一旦被消费，队列中就不存在了；消费者消费消息后需要向队列响应。
             无论接收者有没有在运行，都不会影响消息发送到队列
    2、pub/sub(publish/subscribe,发布/订阅)模型
       发布消息者(publisher)------->主题---------->订阅消息者1、订阅消息者2...
       定义了如何向一个消息节点发布和订阅消息，这个内容节点称之为主题，即消息传递的中介。
       特点：每个消息可以有多个消费者，一对多的广播时采用。
三、springboot集成ActiveMQ
    1、概述
       MessageQueue,消息队列，一个消息接收和消费的容器。Apache的开源消息系统，纯Java实现。
    2、安装ActiveMQ
       下载压缩包，解压缩后进入bin目录，选择64位操作系统，点击activemq.bat启动运行。
    3、运行后，在浏览器输入localhost:8161/admin,输入账号admin和密码admin，登录activemq首页。
    4、导入依赖包--spring-boot-starter-activemq。
    5、application.properties中配置activeMQ。
    6、使用ActiveMQ。
       我们发说说已经测试成功，但是如果亿量级用户每发一个说说，就需要开启一个线程，将内容保存到数据库，而后端线程池
       中的线程数是很宝贵的，这样做必然带来极大的系统压力。
       因此使用ActiveMQ做异步消费，来抵消极大地压力，提高系统性能。
    7、开发生产者和消费者，测试成功。
    8、将发微信说说改成异步消费模式()流量削峰，防止数据库宕机。
四、ActiveMQ应用场景
    1、主要在大型电子商务类网站有重要应用。
    2、在不使用消息队列的情况下，用户的请求数据直接写入数据库，在高并发的情况下，对数据库造成巨大的压力，同时也使系统响应延迟加剧；
       使用队列后，用户的请求发给队列后立即返回；例如：当然不能直接给客户提示订单提交成功，在淘宝上提示："您提交了订单，请等等系统确认"
       再由消息队列的消费者进程从消息队列中获取数据库，异步写入数据库。
    3、消息队列应用场景
        1、异步处理
        2、应用解耦
        3、流量削峰
        4、消息通讯
五、消息队列产生原因
    如今项目开发过程中由于功能多，流程长，机制繁多且复杂，让一个线程去跑完一个业务的整个流程的话会显得非常繁琐
    且耦合性太强，代码量很大，这个时候我们就可以用到一款技术叫做消息队列，我们可以通过定义好发送消息的模式
    以及一些其他数据，就可以在一个业务有很多流程的时候通过发送消息的形式让队列通知消息消费者去完成一些操作，
    比如说数据的存储与修改等，这样无形之中就把一个大业务拆分成了很多小的业务的组合体，实现了代码的解耦
    和复杂业务的分割，逻辑清晰代码层次分明。








六、异步调用
    1、概念
       除了异步请求，一般我们用的比较多的是异步调用。通常在开发过程中，会遇到一个方法是和实际业务无关的，
       没有紧密性的。比如记录日志信息等业务。这个时候正常就是启一个新线程去做一些业务处理，让主线程异步的执行
       其它业务。
    2、异步请求和异步调用的区别
       异步请求用来解决并发请求对服务器造成的压力，从而提高对请求的吞吐量；而异步调用是用来做一些非主线业务流程
       且不需要实时计算和响应的任务，比如同步日志到kafka中做日志分析等。
    3、springboot除了使用多线程来异步调用，也可以使用@Async注解来开启异步调用
    4、@Async的使用
       1、主程序中添加@EnableAsync开启异步调用。
       2、修改AyUserService中的findAll方法，使得其可以计时，测试同步调用所耗时间。
       3、添加异步调用方法findAsyncAll(),在其实现类方法上添加@Async注释，同时在启动类中开启@EnableAsync注释，测试异步调用
          所耗时间。
       4、异步调用时间明显比同步调用时间短。





